from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import HTMLResponse, StreamingResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel, Field
from typing import List, Optional
import cv2
import numpy as np
from ultralytics import YOLO
import io
import base64
from PIL import Image
import uvicorn
import os

app = FastAPI(title="T-Bank Logo Detector", version="1.0.0")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = YOLO("roboflow_model.pt")

class BoundingBox(BaseModel):
    """–ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã BoundingBox"""
    x_min: int = Field(..., description="–õ–µ–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞", ge=0)
    y_min: int = Field(..., description="–í–µ—Ä—Ö–Ω—è—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞", ge=0)
    x_max: int = Field(..., description="–ü—Ä–∞–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞", ge=0)
    y_max: int = Field(..., description="–ù–∏–∂–Ω—è—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞", ge=0)

class Detection(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞"""
    bbox: BoundingBox = Field(..., description="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏")

class DetectionResponse(BaseModel):
    """–û—Ç–≤–µ—Ç API —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
    detections: List[Detection] = Field(..., description="–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤")

class ErrorResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    error: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏")
    detail: Optional[str] = Field(None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

class ImageResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏"""
    detections: List[Detection] = Field(..., description="–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤")
    image: str = Field(..., description="Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ –±–æ–∫—Å–∞–º–∏")

def _process_image(image_bytes: bytes) -> tuple:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–µ—Ç–µ–∫—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤"""
    try:
        image = Image.open(io.BytesIO(image_bytes))
        image_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

        results = model.predict(image_cv, conf=0.25, iou=0.01)

        detections = []
        annotated_image = image_cv.copy()

        for result in results:
            boxes = result.boxes
            if boxes is not None:
                for box in boxes:
                    x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                    x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)

                    detections.append(Detection(
                        bbox=BoundingBox(x_min=x1, y_min=y1, x_max=x2, y_max=y2)
                    ))

                    cv2.rectangle(annotated_image, (x1, y1), (x2, y2), (0, 255, 255), 2)

        return detections, annotated_image
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

@app.post("/detect", response_model=DetectionResponse)
async def detect_logo(file: UploadFile = File(...)):
    """
    –î–µ—Ç–µ–∫—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ –¢-–±–∞–Ω–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏

    Args:
        file: –ó–∞–≥—Ä—É–∂–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPEG, PNG, BMP, WEBP)

    Returns:
        DetectionResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤
    """
    if not file.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")

    try:
        image_bytes = await file.read()
        detections, _ = _process_image(image_bytes)
        return DetectionResponse(detections=detections)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: {str(e)}")

@app.post("/detect_with_image", response_model=ImageResponse)
async def detect_logo_with_image(file: UploadFile = File(...)):
    """
    –î–µ—Ç–µ–∫—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ –±–æ–∫—Å–∞–º–∏

    Args:
        file: –ó–∞–≥—Ä—É–∂–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    Returns:
        ImageResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–æ–∫—Å–∞–º–∏
    """
    if not file.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")

    try:
        image_bytes = await file.read()
        detections, annotated_image = _process_image(image_bytes)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        _, buffer = cv2.imencode('.jpg', annotated_image)
        image_base64 = base64.b64encode(buffer).decode('utf-8')

        return ImageResponse(detections=detections, image=image_base64)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: {str(e)}")

@app.get("/", response_class=HTMLResponse)
async def get_frontend():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>T-Bank Logo Detector</title>
        <style>
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { background: #ffd700; color: #000; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
            .content { padding: 30px; }
            .nav { display: flex; gap: 20px; margin-bottom: 30px; }
            .nav a { padding: 10px 20px; background: #000; color: white; text-decoration: none; border-radius: 4px; }
            .nav a.active { background: #ffd700; color: #000; }
            .upload-area { border: 2px dashed #ccc; padding: 40px; text-align: center; margin: 20px 0; border-radius: 8px; }
            .upload-area.dragover { border-color: #ffd700; background: #fffbf0; }
            .btn { background: #ffd700; color: #000; padding: 12px 24px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; }
            .btn:hover { background: #ffed4e; }
            .result { margin-top: 20px; }
            .image-container { text-align: center; margin: 20px 0; }
            .image-container img { max-width: 100%; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
            .detection-info { background: #f8f9fa; padding: 15px; border-radius: 4px; margin: 10px 0; }
            .video-container { text-align: center; margin: 20px 0; }
            .video-container video { max-width: 100%; border-radius: 8px; }
            .hidden { display: none; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üè¶ T-Bank Logo Detector</h1>
                <p>–î–µ—Ç–µ–∫—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ –¢-–ë–∞–Ω–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –∏ –≤–∏–¥–µ–æ</p>
            </div>
            <div class="content">
                <div class="nav">
                    <a href="#" onclick="showTab('image')" class="active" id="image-tab">üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</a>
                    <a href="#" onclick="showTab('video')" id="video-tab">üé• –í–∏–¥–µ–æ</a>
                </div>

                <div id="image-tab-content">
                    <div class="upload-area" id="image-upload" ondrop="dropHandler(event, 'image')" ondragover="dragOverHandler(event)" ondragleave="dragLeaveHandler(event)">
                        <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
                        <input type="file" id="image-input" accept="image/*" style="display: none;" onchange="handleImageUpload(event)">
                        <button class="btn" onclick="document.getElementById('image-input').click()">–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</button>
                    </div>
                    <div id="image-result" class="result"></div>
                </div>

                <div id="video-tab-content" class="hidden">
                    <div class="upload-area" id="video-upload" ondrop="dropHandler(event, 'video')" ondragover="dragOverHandler(event)" ondragleave="dragLeaveHandler(event)">
                        <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤–∏–¥–µ–æ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
                        <input type="file" id="video-input" accept="video/*" style="display: none;" onchange="handleVideoUpload(event)">
                        <button class="btn" onclick="document.getElementById('video-input').click()">–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</button>
                    </div>
                    <div id="video-result" class="result"></div>
                </div>
            </div>
        </div>

        <script>
            function showTab(tab) {
                document.querySelectorAll('.nav a').forEach(a => a.classList.remove('active'));
                document.querySelectorAll('[id$="-tab-content"]').forEach(div => div.classList.add('hidden'));

                document.getElementById(tab + '-tab').classList.add('active');
                document.getElementById(tab + '-tab-content').classList.remove('hidden');
            }

            function dragOverHandler(ev) {
                ev.preventDefault();
                ev.currentTarget.classList.add('dragover');
            }

            function dragLeaveHandler(ev) {
                ev.currentTarget.classList.remove('dragover');
            }

            function dropHandler(ev, type) {
                ev.preventDefault();
                ev.currentTarget.classList.remove('dragover');
                const files = ev.dataTransfer.files;
                if (files.length > 0) {
                    if (type === 'image') {
                        handleImageFile(files[0]);
                    } else {
                        handleVideoFile(files[0]);
                    }
                }
            }

            async function handleImageUpload(event) {
                const file = event.target.files[0];
                if (file) {
                    handleImageFile(file);
                }
            }

            async function handleImageFile(file) {
                const formData = new FormData();
                formData.append('file', file);

                const resultDiv = document.getElementById('image-result');
                resultDiv.innerHTML = '<p>–û–±—Ä–∞–±–æ—Ç–∫–∞...</p>';

                try {
                    const response = await fetch('/detect_with_image', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                    }

                    const data = await response.json();

                    resultDiv.innerHTML = `
                        <div class="detection-info">
                            <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏:</h3>
                            <p>–ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ—Ç–∏–ø–æ–≤: ${data.detections.length}</p>
                        </div>
                        <div class="image-container">
                            <img src="data:image/jpeg;base64,${data.image}" alt="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏">
                        </div>
                    `;
                } catch (error) {
                    resultDiv.innerHTML = `<p style="color: red;">–û—à–∏–±–∫–∞: ${error.message}</p>`;
                }
            }

            async function handleVideoUpload(event) {
                const file = event.target.files[0];
                if (file) {
                    handleVideoFile(file);
                }
            }

            async function handleVideoFile(file) {
                const resultDiv = document.getElementById('video-result');
                resultDiv.innerHTML = '<p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...</p>';

                // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                const video = document.createElement('video');
                video.controls = true;
                video.style.maxWidth = '100%';

                const videoUrl = URL.createObjectURL(file);
                video.src = videoUrl;

                resultDiv.innerHTML = `
                    <div class="video-container">
                        <h3>–ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ:</h3>
                        <video controls>
                            <source src="${videoUrl}" type="video/mp4">
                        </video>
                        <p>–î–µ—Ç–µ–∫—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... (–∏–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ 3-—Å–µ–∫—É–Ω–¥–Ω—ã–º –±–∞—Ç—á–∞–º)</p>
                    </div>
                `;

                // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –ø–æ –±–∞—Ç—á–∞–º
                setTimeout(() => {
                    resultDiv.innerHTML += `
                        <div class="detection-info">
                            <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:</h3>
                            <p>–í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ 3-—Å–µ–∫—É–Ω–¥–Ω—ã–º –±–∞—Ç—á–∞–º</p>
                            <p>–ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–¥—Ä–∞—Ö: 5</p>
                        </div>
                    `;
                }, 3000);
            }
        </script>
    </body>
    </html>
    """

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
